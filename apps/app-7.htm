<!DOCTYPE html>
<html lang="de">
<head>
<title> App 7 ( Message-Wall )</title>
<meta charset="UTF-8" />
<meta name="robots" content="noindex" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" href="../kern/esa.css" />
<link rel="stylesheet" href="../kern/additions.css" />
<script>
"use strict";
window.onload = function () {
  //if (top["bib"]) { top.bib.dl({ doc: document, id: 'DL1', show_idx: [ ] }); } 
};
var gespeicherte_strings = {};

function store_str(key, val) { gespeicherte_strings[key] = val; } 

function load_str(key) {
  var str = gespeicherte_strings[key];
  return str;
} 

function htmlEntities(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

store_str("post-template", `
<article style="position: absolute; top: {posY}px; left: {posX}px">
  <header>
    <address>Autor: {author}</address>
    <h3>{title}</h3>
  </header>
  <p>{content}</p>
</article>


`);


function post() {
	"use strict";
	var inputtext = document.getElementById("post-input").value;
	var authortext = document.getElementById("post-author").value;
	var titletext = document.getElementById("post-title").value;
	var posX = document.getElementById("post-posx").value;
	var posY = document.getElementById("post-posy").value;
	var password = document.getElementById("post-password").value;
	


	if (inputtext !== "") {
		var output = createPostFromTemplate(
			{
				"content" : inputtext,
				"author" : htmlEntities(authortext),
				"title" : htmlEntities(titletext),
				"posX" : parseInt(posX),
				"posY" : parseInt(posY)
			}
			);
		var postElement = document.createElement("div");
		postElement.innerHTML = output;
		document.getElementById("posting-wall").appendChild(postElement);

		document.getElementById("post-input").value = "";
		document.getElementById("post-author").value = "";
		document.getElementById("post-title").value = "";
		console.log(encrypt_string(output, password));
		console.log(password);
		sendTextToServer(htmlEntities(authortext), encrypt_string(output, password));

	}

}

function sendTextToServer(name, text) {
	var xhr;
	try {xhr = new XMLHttpRequest();} catch (try_ms) {
	 try {xhr = new ActiveXObject("Msxml2.XMLHTTP");} catch (try_ms_old) {
	  try {xhr = new ActiveXObject("Microsoft.XMLHTTP");} catch (failed) { xhr = false; }}}
	
	if (!xhr) { 
		alert("Senden unmöglich\nKein Internet/XMLHttpRequest"); 
		return 0; 
	}
	xhr.open("POST", "messenger.php", true); // AJAX-post-submit
	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
	var str = 'name='    + name 
	     + '&text=' + text;
	//     + '&JSONkey=' + JSON.stringify(obj);
	xhr.send(str);
	xhr.onreadystatechange = function () {
		if (xhr.readyState === 4 && xhr.status === 200) {
			// lediglich zum 1. Testen 
			alert(xhr.responseText); // oder that.form.LOCATION.value = xhr.responseText;
		 
		 //was dann? if (o.post_reset) {that.form.reset(); }
		 //was dann? if (o.post_htm) { bib.url_to_frame(o.frame_name, obj.urlpost); }
		}
	}
}

function getTextFromServer() {
	var password = document.getElementById("load-password").value; 
	var xhr;
	try {xhr = new XMLHttpRequest();} catch (try_ms) {
	 try {xhr = new ActiveXObject("Msxml2.XMLHTTP");} catch (try_ms_old) {
	  try {xhr = new ActiveXObject("Microsoft.XMLHTTP");} catch (failed) { xhr = false; }}}
	
	if (!xhr) { 
		alert("Senden unmöglich\nKein Internet/XMLHttpRequest"); 
		return 0; 
	}
	xhr.open("POST", "messenger.php", true); // AJAX-post-submit
	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
	var str = 'password=' + password
	xhr.send(str);
	xhr.onreadystatechange = function () {
		if (xhr.readyState === 4 && xhr.status === 200) {
			// lediglich zum 1. Testen
			var responseObject = JSON.parse(xhr.responseText);
			console.log(encrypt_string(responseObject.content, password)); // oder that.form.LOCATION.value = xhr.responseText;
		 
		 //was dann? if (o.post_reset) {that.form.reset(); }
		 //was dann? if (o.post_htm) { bib.url_to_frame(o.frame_name, obj.urlpost); }
		}
	}
}

function createPostFromTemplate(replacements) {
	"use strict";
	var template = load_str("post-template"), key;

	//Alle Marker ersetzen, die vorkommen
	for (key in replacements) {
		template = template.replace(new RegExp("{" + key + "}", "g"), replacements[key]);
	}
	return template;
}

function togglePostForm() {
	"use strict";
	var postForm = document.getElementById("post-form");
	var toggleSpan = document.getElementById("toggle-span");

	if (postForm.hasAttribute("hidden")) {
		postForm.removeAttribute("hidden");
		toggleSpan.innerHTML = "Hide";

	}
	else {
		postForm.setAttribute("hidden", "");
		toggleSpan.innerHTML = "Show";
	}
}

function encodeString(s, k) {
	var enc = "";
	var str = "";
	str = s.toString();
	for (var i = 0; i < s.length; i++) {
		var a = s.charCodeAt(i);
		// bitweise XOR
		var b = a ^ k;
		enc = enc + String.fromCharCode(b);
	}
	return enc;
}

function encrypt_string(str, key) { // nur fuer 8-Bit-Zeichen
	var i, j, key_char, str_char, r = "", str_len = str.length, key_len = key.length;
	if (key_len < 1) { key = "test"; }
	//key += str;
	//str=str.replace(/^[\s\S]*?id="GEHEIME_INFOS">/,"").replace(/<\/div>\s*<\/body>\s*<\/html>\s*$/,"");
	for ( i = 0; i < str_len; i += 1) { 
	str_char = str.charCodeAt(i);
	key_char = key.charCodeAt(i % key_len);
	if (str_char != key_char) { str_char ^= key_char; }
	r += String.fromCharCode(str_char);
	} return r;
}


</script>
</head>
<body>


<h1> Messenger 
</h1>


<div id="posting-wall" style="position: absolute; top: 50px; left: 0px; width: 100%; height: 100%; z-index: 1;">

<div id="control-panel" >
	<div class="panel-header">
		<h2>Control-Panel <span onclick="togglePostForm()" id="toggle-span">Hide</span></h2>
	</div>
	<form id="post-form" onsubmit="event.preventDefault(); post();">
		<label for="post-author">Name</label>
		<input type="text" id="post-author" name="post-author" value="Autor"></input>

		<label for="post-title">Title</label>
		<input type="text" id="post-title" name="post-title" value="Testtitel"></input>

		<label for="post-input">What do you want to say?</label>
		<textarea id="post-input" name="post-input" rows="8">Das ist ein Text.</textarea>

		<label for="post-title">Position X</label>
		<input type="text" id="post-posx" name="post-posx" value="400"></input>

		<label for="post-title">Position Y</label>
		<input type="text" id="post-posy" name="post-posy" value="50"></input>

		<label for="post-password">Password</label>
		<input type="password" id="post-password" name="post-password"></input>

		<button type="submit" id="post-submit">Posten</button>
	</form>

	<form id="load-form" onsubmit="event.preventDefault(); getTextFromServer();">

		<label for="load-password">Password</label>
		<input type="password" id="load-password" name="load-password"></input>

		<button type="submit" id="load-submit">Load Data</button>
	</form>

</div>


</div>


</body>
</html>


